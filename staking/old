#![cfg_attr(not(feature = "std"), no_std)]

#[ink::contract]
mod staking {
    use ink::prelude::vec::Vec;
    use ink::storage::Mapping;
    use ink::storage::traits::{Storable, StorageLayout};


    #[derive(Debug, Clone, PartialEq, Eq, scale::Encode, scale::Decode, StorageLayout)]
    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]
    pub struct StakeInfo {
        pub amount: u128,
        pub started_at: u64,
        pub period: u32,
        pub active_until: u64,
    }

    
    #[ink(storage)]
    pub struct Staking {
        pub stakes: Mapping<AccountId, StakeInfo>,
        pub level_periods: Mapping<u32, Vec<u32>>,
        pub last_reward_claims: Mapping<AccountId, u64>,
        pub operators: Mapping<AccountId, bool>,
        pub available_periods: Vec<u32>,
        pub reward_token: AccountId,
        pub total_staked: u128,
        pub rewards_balance: u128,
        pub reward_rate: u128,
        pub early_withdraw_fee: u128,
        pub reward_conversion_rate: u128,
    }
    impl Staking {
        #[ink(constructor)]
        pub fn new(reward_token: AccountId, reward_conversion_rate: u128) -> Self {
            let mut available_periods = Vec::new();
            available_periods.push(6);
            available_periods.push(12);

            Self {
                stakes: Mapping::new(),
                level_periods: Mapping::new(),
                last_reward_claims: Mapping::new(),
                operators: Mapping::new(),
                available_periods,
                reward_token,
                total_staked: 0,
                rewards_balance: 0,
                reward_rate: 5,
                early_withdraw_fee: 10,
                reward_conversion_rate,
            }
        }


        #[ink(message)]
        pub fn get_staking_period(&self, account: AccountId) -> u32 {
            if let Some(stake_info) = self.stakes.get(&account) {
                ((stake_info.active_until - stake_info.started_at) / 86400) as u32
            } else {
                0
            }
        }

        #[ink(message)]
        pub fn available_rewards(&self, account: AccountId) -> u128 {
            if let Some((_, reward)) = self.reward_amount(account) {
                reward
            } else {
                0
            }
        }

        #[ink(message)]
        pub fn passed_reward_periods(&self, account: AccountId) -> u32 {
            if let Some((passed_periods, _)) = self.reward_amount(account) {
                passed_periods
            } else {
                0
            }
        }


        #[ink(message)]
        pub fn all_stake_info(&self, account: AccountId) -> (u128, u64, u32, u64, u128, u64) {
            if let Some(stake_info) = self.stakes.get(&account) {
                let amount = stake_info.amount;
                let started_at = stake_info.started_at;
                let period = stake_info.period;
                let active_until = stake_info.active_until;
                let (rewards, next_reward_seconds) = if amount != 0 {
                    let (_, reward) = self.reward_amount(account).unwrap_or((0, 0));
                    let next_reward_seconds = self.next_reward_date(account).unwrap_or(0);
                    (reward, next_reward_seconds)
                } else {
                    (0, 0)
                };
                (amount, started_at, period, active_until, rewards, next_reward_seconds)
            } else {
                (0, 0, 0, 0, 0, 0)
            }
        }

        #[ink(message)]
        pub fn next_reward_date(&self, account: AccountId) -> u64 {
            self._next_reward_date(account).unwrap_or(0)
        }

        #[ink(message, payable)]
        pub fn stake(&mut self, period: u32) {
            let caller = self.env().caller();
            let value = self.env().transferred_value();
            assert!(value > 0, "amount should be > 0");
            let previous_amount = self.stakes.get(&caller).map(|info| info.amount).unwrap_or(0);
            if previous_amount != 0 {
                self._collect_rewards(caller, true);
            }
            self._stake(caller, period, value);
        }

        #[ink(message)]
        pub fn withdraw(&mut self) {
            let caller = self.env().caller();
            assert!(self.stakes.get(&caller).is_some(), "no stake");
            self._collect_rewards(caller, true);
            let amount = self.stakes.get(&caller).unwrap().amount;
            self._withdraw(caller, amount);
        }

        #[ink(message)]
        pub fn emergency_withdraw(&mut self) {
            let caller = self.env().caller();
            assert!(self.stakes.get(&caller).is_some(), "no stake");
            let amount = self.stakes.get(&caller).unwrap().amount;
            self._withdraw(caller, amount);
            self.stakes.insert(caller, &StakeInfo {
                amount: 0,
                started_at: 0,
                period: 0,
                active_until: 0,
            });
        }

        #[ink(message)]
        pub fn prolong(&mut self, period: u32) {
            let caller = self.env().caller();
            let stake_info = self.stakes.get(&caller).unwrap();
            assert!(stake_info.amount > 0, "stake required");
            assert!(stake_info.active_until < self.env().block_timestamp(), "still active");
            self._collect_rewards(caller, true);
            self._stake(caller, period, 0);
        }

        #[ink(message)]
        pub fn harvest(&mut self) {
            let caller = self.env().caller();
            assert!(self.stakes.get(&caller).is_some(), "no stake");
            self._collect_rewards(caller, false);
        }

        #[ink(message, payable)]
        pub fn update_rewards_pool(&mut self) {
            let value = self.env().transferred_value();
            assert!(value > 0, "amount should be > 0");
            self.rewards_balance += value;
            self.env().emit_event(RewardPoolUpdated { amount: value });
        }

        fn _validate_period(&self, period: u32) {
            assert!(self.available_periods.contains(&period), "period not exist");
        }

        fn reward_amount(&self, account: AccountId) -> Option<(u32, u128)> {
            let stake_info = self.stakes.get(&account)?;
            let time = if self.env().block_timestamp() > stake_info.active_until {
                stake_info.active_until
            } else {
                self.env().block_timestamp()
            };
            let periods_passed = (time - self.last_reward_claims.get(&account).unwrap_or(0)) / 86400;
            let reward = (stake_info.amount * self.reward_rate * periods_passed as u128 * 100) / 36000;
            Some((periods_passed as u32, reward))
        }

        fn _next_reward_date(&self, account: AccountId) -> Option<u64> {
            let last_claim = self.last_reward_claims.get(&account)?;
            let stake_info = self.stakes.get(&account)?;
            if self.env().block_timestamp() > stake_info.active_until {
                Some(stake_info.active_until)
            } else {
                let passed_periods = (self.env().block_timestamp() - stake_info.started_at) / 86400;
                Some(((passed_periods + 1) * 86400) + stake_info.started_at)
            }
        }

        fn _stake(&mut self, account: AccountId, periods: u32, amount: u128) {
            let new_amount = self.stakes.get(&account).map_or(amount, |info| info.amount + amount);
            self._validate_period(periods);
            let until = if amount == 0 {
                self.env().block_timestamp() + (periods as u64 * 86400 * 30)
            } else {
                self.stakes.get(&account).unwrap().active_until
            };

            self._set_stake_info(account, new_amount, periods, self.env().block_timestamp(), until);
            self.total_staked += amount;
            self.env().emit_event(Stake {
                account,
                staked_at: self.env().block_timestamp(),
                period: periods,
                sum: amount,
                total_staked: new_amount,
            });
        }

        fn _withdraw(&mut self, account: AccountId, amount: u128) {
            self._set_stake_info(account, 0, 0, 0, 0);
            self.env().transfer(account, amount).unwrap();
            self.env().emit_event(Withdraw {
                account,
                sum: amount,
                is_early: false,
            });
        }

        // fn _collect_rewards(&mut self, account: AccountId, not_direct: bool) {
        //     if let Some(stake_info) = self.stakes.get(&account) {
        //         if stake_info.amount > 0 {
        //             if let Some((periods, reward)) = self.reward_amount(account) {
        //                 if not_direct && periods == 0 {
        //                     return;
        //                 }
        //             }
        //             assert!(self.rewards_balance >= reward, "not enough rewards");
        //             assert!(periods > 0, "too early");
        //             self.last_reward_claims.insert(account, &(self.last_reward_claims.get(&account).unwrap_or(0) + ((86400 * periods) as u64)));
        //             self.rewards_balance -= reward;
        //             let reward_amount_in_reward_token = reward * self.reward_conversion_rate;
        //             self.env().emit_event(Harvest {
        //                 account,
        //                 periods,
        //                 amount: reward,
        //             });
        //             // Transfer the reward tokens to the account
        //             // Assuming the reward token follows the PSP22 standard
        //             ink::env::call::build_call::<ink::env::DefaultEnvironment>()
        //             .call(self.reward_token)
        //             .gas_limit(5000)
        //             .transferred_value(0)
        //             .exec_input(
        //                 ink::env::call::ExecutionInput::new(ink::env::call::Selector::new([0x23, 0xb8, 0x72, 0xdd])) // transfer selector
        //                     .push_arg(account)
        //                     .push_arg(reward_amount_in_reward_token),
        //             )
        //             .returns::<()>()
        //             .invoke();
        //         }
        //     }
        // }

        fn _collect_rewards(&mut self, account: AccountId, not_direct: bool) {
            if let Some(stake_info) = self.stakes.get(&account) {
                if stake_info.amount > 0 {
                    if let Some((periods, reward)) = self.reward_amount(account) {
                        if not_direct && periods == 0 {
                            return;
                        }
                        assert!(self.rewards_balance >= reward, "not enough rewards");
                        assert!(periods > 0, "too early");
                        self.last_reward_claims.insert(account, &(self.last_reward_claims.get(&account).unwrap_or(0) + ((86400 * periods) as u64)));
                        self.rewards_balance -= reward;
                        let reward_amount_in_reward_token = reward * self.reward_conversion_rate;
                        self.env().emit_event(Harvest {
                            account,
                            periods,
                            amount: reward,
                        });
                        // Transfer the reward tokens to the account
                        // Assuming the reward token follows the PSP22 standard
                        ink::env::call::build_call::<ink::env::DefaultEnvironment>()
                            .call(self.reward_token)
                            .gas_limit(5000)
                            .transferred_value(0)
                            .exec_input(
                                ink::env::call::ExecutionInput::new(ink::env::call::Selector::new([0x23, 0xb8, 0x72, 0xdd])) // transfer selector
                                    .push_arg(account)
                                    .push_arg(reward_amount_in_reward_token),
                            )
                            .returns::<()>()
                            .invoke();
                    }
                }
            }
        }
        fn _set_stake_info(&mut self, account: AccountId, amount: u128, periods: u32, started_at: u64, until: u64) {
            self.stakes.insert(account, &StakeInfo {
                amount,
                started_at,
                period: periods,
                active_until: until,
            });
        }
    }

    #[ink(event)]
    pub struct Stake {
        #[ink(topic)]
        account: AccountId,
        staked_at: u64,
        period: u32,
        sum: u128,
        total_staked: u128,
    }

    #[ink(event)]
    pub struct Withdraw {
        #[ink(topic)]
        account: AccountId,
        sum: u128,
        is_early: bool,
    }

    #[ink(event)]
    pub struct RewardPoolUpdated {
        amount: u128,
    }

    #[ink(event)]
    pub struct Harvest {
        #[ink(topic)]
        account: AccountId,
        periods: u32,
        amount: u128,
    }
}

#[cfg(test)]
mod tests {
    use crate::staking::Staking;
    use ink::env::{test, DefaultEnvironment};

    #[ink::test]
    fn test_new() {
        let accounts = test::default_accounts::<DefaultEnvironment>();
        let staking = Staking::new(accounts.alice, 1);
        assert_eq!(staking.reward_token, accounts.alice);
        assert_eq!(staking.reward_conversion_rate, 1);
        assert_eq!(staking.available_periods, vec![6, 12]);
    }

    #[ink::test]
    fn test_stake() {
        let accounts = test::default_accounts::<DefaultEnvironment>();
        let mut staking = Staking::new(accounts.alice, 1);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        test::set_value_transferred::<DefaultEnvironment>(10);
        staking.stake(6);

        let stake_info = staking.stakes.get(&accounts.bob).unwrap();
        assert_eq!(stake_info.amount, 10);
        assert_eq!(stake_info.period, 6);
    }

    #[ink::test]
    fn test_withdraw() {
        let accounts = test::default_accounts::<DefaultEnvironment>();
        let mut staking = Staking::new(accounts.alice, 1);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        test::set_value_transferred::<DefaultEnvironment>(10);
        staking.stake(6);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        staking.withdraw();

        let stake_info = staking.stakes.get(&accounts.bob).unwrap();
        assert_eq!(stake_info.amount, 0);
    }

    #[ink::test]
    fn test_emergency_withdraw() {
        let accounts = test::default_accounts::<DefaultEnvironment>();
        let mut staking = Staking::new(accounts.alice, 1);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        test::set_value_transferred::<DefaultEnvironment>(10);
        staking.stake(6);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        staking.emergency_withdraw();

        let stake_info = staking.stakes.get(&accounts.bob).unwrap();
        assert_eq!(stake_info.amount, 0);
    }

    #[ink::test]
    fn test_prolong() {
        let accounts = test::default_accounts::<DefaultEnvironment>();
        let mut staking = Staking::new(accounts.alice, 1);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        test::set_value_transferred::<DefaultEnvironment>(10);
        staking.stake(6);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        test::advance_block::<DefaultEnvironment>();
        staking.prolong(6);

        let stake_info = staking.stakes.get(&accounts.bob).unwrap();
        assert_eq!(stake_info.period, 6);
    }

    #[ink::test]
    fn test_harvest() {
        let accounts = test::default_accounts::<DefaultEnvironment>();
        let mut staking = Staking::new(accounts.alice, 1);

        test::set_caller::<DefaultEnvironment>(accounts.bob);
        test::set_value_transferred::<DefaultEnvironment>(10);
        staking.stake(6);

        test::advance_block::<DefaultEnvironment>();
        test::set_caller::<DefaultEnvironment>(accounts.bob);
        staking.harvest();

        let reward = staking.available_rewards(accounts.bob);
        assert!(reward > 0);
    }

    #[ink::test]
    fn test_update_rewards_pool() {
        let accounts = test::default_accounts::<DefaultEnvironment>();
        let mut staking = Staking::new(accounts.alice, 1);

        test::set_caller::<DefaultEnvironment>(accounts.alice);
        test::set_value_transferred::<DefaultEnvironment>(100);
        staking.update_rewards_pool();

        assert_eq!(staking.rewards_balance, 100);
    }
}
